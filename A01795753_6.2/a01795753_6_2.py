# -*- coding: utf-8 -*-
"""A01795753_6.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JCqVTCAhyYMuojBWPMO48wV99fPjcwb1
"""

import json
import os
import unittest
from typing import List, Dict

class Hotel:
    def __init__(self, hotel_id: int, name: str, location: str, rooms_available: int):
        self.hotel_id = hotel_id
        self.name = name
        self.location = location
        self.rooms_available = rooms_available

    def to_dict(self) -> Dict:
        return {
            "id": self.hotel_id,
            "name": self.name,
            "location": self.location,
            "rooms_available": self.rooms_available
        }

def delete_hotel(hotels: List[Dict], hotel_id: int, file_path: str):
    hotels = [hotel for hotel in hotels if hotel["id"] != hotel_id]
    save_json_file(file_path, hotels)

def modify_hotel(hotels: List[Dict], hotel_id: int, updated_info: Dict, file_path: str):
    for hotel in hotels:
        if hotel["id"] == hotel_id:
            hotel.update(updated_info)
            break
    save_json_file(file_path, hotels)

def reserve_room(hotels: List[Dict], hotel_id: int, file_path: str):
    for hotel in hotels:
        if hotel["id"] == hotel_id and hotel["rooms_available"] > 0:
            hotel["rooms_available"] -= 1
            save_json_file(file_path, hotels)
            return "Reserva exitosa."
    return "No hay habitaciones disponibles."

def cancel_reservation(hotels: List[Dict], hotel_id: int, file_path: str):
    for hotel in hotels:
        if hotel["id"] == hotel_id:
            hotel["rooms_available"] += 1
            save_json_file(file_path, hotels)
            return "Reserva cancelada."
    return "Hotel no encontrado."

class Customer:
    def __init__(self, customer_id: int, name: str, email: str, phone: str):
        self.customer_id = customer_id
        self.name = name
        self.email = email
        self.phone = phone

    def to_dict(self) -> Dict:
        return {
            "id": self.customer_id,
            "name": self.name,
            "email": self.email,
            "phone": self.phone
        }

def delete_customer(customers: List[Dict], customer_id: int, file_path: str):
    customers = [customer for customer in customers if customer["id"] != customer_id]
    save_json_file(file_path, customers)

def modify_customer(customers: List[Dict], customer_id: int, updated_info: Dict, file_path: str):
    for customer in customers:
        if customer["id"] == customer_id:
            customer.update(updated_info)
            break
    save_json_file(file_path, customers)

class Reservation:
    def __init__(self, reservation_id: int, customer_id: int, hotel_id: int, check_in: str, check_out: str):
        self.reservation_id = reservation_id
        self.customer_id = customer_id
        self.hotel_id = hotel_id
        self.check_in = check_in
        self.check_out = check_out

    def to_dict(self) -> Dict:
        return {
            "id": self.reservation_id,
            "customer_id": self.customer_id,
            "hotel_id": self.hotel_id,
            "check_in": self.check_in,
            "check_out": self.check_out
        }

def cancel_reservation_entry(reservations: List[Dict], reservation_id: int, file_path: str):
    reservations = [reservation for reservation in reservations if reservation["id"] != reservation_id]
    save_json_file(file_path, reservations)

def load_json_file(file_path: str) -> List[Dict]:
    if not os.path.exists(file_path):
        print(f"Error: El archivo {file_path} no existe.")
        return []
    try:
        with open(file_path, "r") as file:
            return json.load(file)
    except (json.JSONDecodeError, IOError) as e:
        print(f"Error al cargar {file_path}: {e}")
        return []

def save_json_file(file_path: str, data: List[Dict]):
    try:
        with open(file_path, "w") as file:
            json.dump(data, file, indent=4)
    except IOError as e:
        print(f"Error al guardar {file_path}: {e}")

class TestHotel(unittest.TestCase):
    def test_create_hotel(self):
        hotel = Hotel(1, "Hotel Test", "Test City", 10)
        self.assertEqual(hotel.to_dict()["name"], "Hotel Test")

class TestCustomer(unittest.TestCase):
    def test_create_customer(self):
        customer = Customer(1, "Pepe Rios", "prios@example.com", "123456789")
        self.assertEqual(customer.to_dict()["email"], "prios@example.com")

class TestReservation(unittest.TestCase):
    def test_create_reservation(self):
        reservation = Reservation(1, 1, 1, "2025-06-01", "2025-06-10")
        self.assertEqual(reservation.to_dict()["check_in"], "2025-06-01")

def main():
    hotels_file = input("Ingrese la ruta del archivo hotels.json: ")
    customers_file = input("Ingrese la ruta del archivo customers.json: ")
    reservations_file = input("Ingrese la ruta del archivo reservations.json: ")

    hotels = load_json_file(hotels_file)
    customers = load_json_file(customers_file)
    reservations = load_json_file(reservations_file)

    print(f"Se cargaron {len(hotels)} hoteles, {len(customers)} clientes y {len(reservations)} reservas.")

if __name__ == "__main__":
    main()
    unittest.main()